name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (User Service)
        working-directory: ./services/user-service
        run: |
          if ! npm ci; then
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Run tests (User Service)
        working-directory: ./services/user-service
        run: npm test -- --watchAll=false
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret

      - name: Install dependencies (Frontend)
        working-directory: ./client
        run: |
          if ! npm ci; then
            echo "npm ci failed, falling back to npm install"
            npm install
          fi

      - name: Run tests (Frontend)
        working-directory: ./client
        run: npm run test:ci
        env:
          CI: true

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push User Service image
        working-directory: ./services/user-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/faithtech-user-service:$IMAGE_TAG .
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/faithtech-user-service:latest .
          docker push $ECR_REGISTRY/faithtech-user-service:$IMAGE_TAG
          docker push $ECR_REGISTRY/faithtech-user-service:latest

      - name: Build, tag, and push Frontend image
        working-directory: ./client
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/faithtech-frontend:$IMAGE_TAG \
            --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            --build-arg REACT_APP_GA_MEASUREMENT_ID=${{ secrets.REACT_APP_GA_MEASUREMENT_ID }} \
            .
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/faithtech-frontend:latest \
            --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            --build-arg REACT_APP_GA_MEASUREMENT_ID=${{ secrets.REACT_APP_GA_MEASUREMENT_ID }} \
            .
          docker push $ECR_REGISTRY/faithtech-frontend:$IMAGE_TAG
          docker push $ECR_REGISTRY/faithtech-frontend:latest

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          # Update ECS service to use new images
          aws ecs update-service \
            --cluster faithtech-production \
            --service user-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          aws ecs update-service \
            --cluster faithtech-production \
            --service frontend \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster faithtech-production \
            --services user-service frontend \
            --region ${{ env.AWS_REGION }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord notification here

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add Slack/Discord notification here
