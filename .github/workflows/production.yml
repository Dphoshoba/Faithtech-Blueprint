name: Production Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_NAMESPACE: faithtech

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Check types
        run: npm run type-check
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
      
      - name: Run dependency scan
        run: npm audit
      
      - name: Run container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/faithtech-blueprint:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          file: ./api-gateway/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/api-gateway:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/api-gateway:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/api-gateway:buildcache,mode=max
      
      - name: Build and push User Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/user-service
          file: ./services/user-service/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/user-service:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/user-service:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/user-service:buildcache,mode=max
      
      - name: Build and push Subscription Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/subscription-service
          file: ./services/subscription-service/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/subscription-service:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/subscription-service:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/subscription-service:buildcache,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PROD_SSH_KEY }}
          known_hosts: ${{ secrets.PROD_KNOWN_HOSTS }}
      
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/faithtech-blueprint
            
            # Pull latest changes
            git pull origin main
            
            # Update environment variables
            echo "${{ secrets.PROD_ENV }}" > .env.production
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Clean up old images
            docker system prune -af
      
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Check service health
            docker-compose -f docker-compose.prod.yml ps
            
            # Verify application health
            curl -f http://localhost/health
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/faithtech-blueprint
            
            # Rollback to previous version
            docker-compose -f docker-compose.prod.yml down
            
            # Restore previous images
            docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/api-gateway:rollback ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/api-gateway:latest
            docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/user-service:rollback ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/user-service:latest
            docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/subscription-service:rollback ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/subscription-service:latest
            
            # Start previous version
            docker-compose -f docker-compose.prod.yml up -d
      
      - name: Notify Slack about rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "Deployment failed, rolled back to previous version"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  upload_production_results:
    name: Upload production results
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Upload production results
        uses: actions/upload-artifact@v4
        with:
          name: production-results
          path: |
            dist/
            build/
            .next/
            out/
          retention-days: 7 